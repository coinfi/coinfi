class Artemis
  def self.restricted_residencies
    [
      "CANADA", "HONG KONG", "CAYMAN ISLANDS", "CHINA",
      "UNITED STATES OF AMERICA", "UNITED STATES VIRGIN ISLANDS", "UNITED STATES MINOR OUTLYING ISLANDS"
    ]
  end

  def self.auth_hash
    { "WEB2PY-USER-TOKEN" => ENV.fetch("ARTEMIS_API_TOKEN") }
  end

  # Returns the approval status
  def self.individual_risk(user_id, params)
    query_params = {
      "domain_name" => ENV.fetch("ARTEMIS_DOMAIN"),
      "rfrID" => user_id,
      "first_name" => params[:first_name],
      "last_name" => params[:last_name],
      "nationality" => params[:nationality],
      "country_of_residence" => params[:residency],
      "gender" => params[:gender].upcase,
      "date_of_birth" => Artemis.format_dob(params[:date_of_birth]),
      "identification_number" => params[:id_number],
      "ssic_code" => "UNKNOWN",
      "ssoc_code" => "UNKNOWN",
      "onboarding_mode" => "NON FACE-TO-FACE",
      "payment_mode" => "VIRTUAL CURRENCY",
      "product_service_complexity" => "SIMPLE",
    }

    begin
      response = RestClient.post(
        ENV.fetch("ARTEMIS_API_ENDPOINT") + "default/individual_risk",
        query_params,
        Artemis.auth_hash
      )
      JSON.parse(response.body)
    rescue => e
      puts "Error during processing: #{$!}"
      puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}"
      raise
    end
  end

  def self.individual_risk_approval_status(response)
    puts response["errors"] if response["errors"].present?
    response["approval_status"]
  end

  # Returns the document ID generated by Artemis
  def self.upload_individual_document(user_id, file, filename)
    # RestClient is janky and broken; monkey patch:
    # http://www.recursion.org/2013/5/26/string-attachment-with-mailgun
    # https://gist.github.com/Burgestrand/850377
    def file.path
      'file.jpg'
    end

    begin
      response = RestClient.post(
        ENV.fetch("ARTEMIS_API_ENDPOINT") + "api/individual_doc",
        {
          "cust_rfr_id" => user_id,
          "file" => file,
          "filename" => filename,
        },
        Artemis.auth_hash
      )
      data = JSON.parse(response.body)
      source_doc_id = data["id"]
      puts data["errors"] if data["errors"].present?
      # TODO: Handle error case

      source_doc_id
    rescue => e
      puts "Error during processing: #{$!}"
      puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}"
      raise
    end
  end

  # Returns boolean representing whether or not user passed facial recognition
  def self.facial_recognition(user_id, source_doc_id, target_doc_id)
    begin
      response = RestClient.post(
        ENV.fetch("ARTEMIS_API_ENDPOINT") + "api/individual_face",
        {
          "cust_rfr_id" => user_id,
          "source_doc_id" => source_doc_id,
          "target_doc_id" => target_doc_id,
        },
        Artemis.auth_hash
      )
      JSON.parse(response.body)
    rescue => e
      puts "Error during processing: #{$!}"
      puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}"
      raise
    end
  end

  def self.facial_recognition_similarity_score(response)
    puts response["errors"] if response["errors"].present?
    response["similarity"] || 0
  end

  def self.individual_report(user_id)
    begin
      response = RestClient.post(
        ENV.fetch("ARTEMIS_API_ENDPOINT") + "api/individual_customer_report",
        { "cust_rfr_id" => user_id },
        Artemis.auth_hash
      )
      data = JSON.parse(response.body)
      data["approval_status"]
    rescue => e
      puts "Error during processing: #{$!}"
      puts "Backtrace:\n\t#{e.backtrace.join("\n\t")}"
      raise
    end
  end

private

  def self.format_dob(yyyymmdd)
    date = Date.strptime(yyyymmdd, "%Y-%m-%d")
    date.strftime("%d/%m/%Y")
  end

end
